# chapter2 웹의 역사

// 하이퍼미디어, 분산시스템의 측면에서 역사적 배경을 알아보자

## 1 웹 이전의 인터넷

초기의 인터넷에는 웹이 없었다.

- 최초는 ARPANET으로, 미국 내 대학과 연구기관 사이를 고속 회선으로 접속하고, 미국을 연결하는 네트워크로 성장해갔다.
- 당시에는 TCP/IP 뿐 아니라 패킷 릴레이 방식의 UUCP에 의한 전송도 존재해서 메일 송신에 시간이 걸렸다.

## 2 웹 이전의 하이퍼미디어

- Memex by 버나바 부시 1945
정보 검색 시스템에 대한 논문. 전기적으로 접속한 책과 파일을 서로 링크하고 링크를 따라서 차례로 표시하는 웹을 예상할 수 있던 시스템. 시스템이 아닌 구상이었음.
- Xanadu(제나두) by 테드넬슨 1965
memex 영향받은 연구자. 문자 중심의 문서를 상호 리크시키는 "하이퍼텍스트", 더 넘어서 음성과 동영상 등 다양한 미디어를 상호 링크시킨 "하이퍼미디어" 용어 고안.
하이퍼미디어 Xanadu 구상하고 개발시작했으나, 고기능으로 인한 복잡성으로 실패.
- HyperCard by Bill Atkinson 1987
네트워크를 통해 데이터를 주고받는 기능조차 없었지만, 카드라고 불리는 문서를 단위로 상호 링크하고, 스크립트 언어 HyperTalk에 의한 프로그램을 실행할 수 있는 방식. 성공 거둠.

### 웹 이전 하이퍼미디어의 문제점

링크는 웹에서 필수 불가결
ㄴ 대표적 예로, 구글의 페이지랭크, 트랙백 같은 기술이 링크를 전제로 설계됨.

웹은 단방향 링크, 링크가 끊어질 가능성 있고, 버전관리와 트랜스클루전 기능이 없음.
→ 현재 웹이 살아남은 것은 최소한의 링크 기능. 이전 하이퍼미디어의 문제점은 복잡성에 있었음.

## 3 웹 이전의 분산 시스템

- 중앙 집중형 시스템과 분산 시스템
1970 이후, 소형화되고 성능 향상되면서 복수 컴퓨터 조합하여 처리 분산시킴 가능해짐.
- RPC ; Remote Procedure Call
분산 시스템 실현 위한 기술 중 하나. 원격 서버에서 실행하고 있는 프로그램을 클라이언트 쪽에서 호출가능.
Sun Microsystems의 SunRPC, 아폴로, IBM과 DEC가 공동 개발한 DCE.
- CORBA, DCOM - 분산 오브젝트
단순한 함수 호출이 아니라, 오브젝트 자체를 원껵으로 배치하는 분산 오브젝트 라는 기술 고안됨.
CORBA, DCOM은 IDL(Interface Definition Language)로 오브젝트의 메서드를 정의하고, 꾸현은 ㄴ네트워크를 경유해 직렬화된 메시지를 교환한다는 점이 RPC와 동일.
단, 범용적 오브젝트 기능 실현하려고 했어서, 복잡한 스펙 가졌고, CORBA와 DCOM(by MS)은 호환성 x

### 문제점

RPC는 현재도 NFS같은 곳에서 사용되나, 통신 상대가 어느 정도 정해져있는 경우까지만 가능.

- 성능열화의 문제 : 함수의 입도가 작아, 목적 달성 위해서 여러 번 호출하지 않으면 안됨.
- 데이터 변환의 문제 : 프로그램 언어마다 지원하는 형태가 달라서 변환시 문제
- 인터페이스 버전업 시 호환성 문제 : 서버 인터페이스 변경시, 하위 클라이언트에 하위 호환 불가
- 부하 분산의 문제  : 서버 상에 클라이언트의 애플리케이션 상태를 가지고 있어서, 서버끼리 애플리케이션 상태 공유가 이뤄져야 하며, 다수의 서버에서 부하를 분산하는 것이 어려움.

## 4 웹의 탄생

1980년대까지 하이퍼미디어에 대한 구상 생기고, 복수의 컴퓨터를 연결하는 분산시스템이 구축됨. 이런 환경 하에서 웹은 탄생.

1990 11.12 CERN에서 근무하는 팀 버너스 리가 첫 버전의 서버와 브라우저 완성.

보급을 앞당긴 것은 일리노이 대학의 NCSA가 공개한 브라우저 Mosaic. 본문에 이미지 혼재 가능, IE, fireefox 의 원류가 됨.

### 하이퍼 미디어로서의 웹

인터넷을 이용한 하이퍼미디어로 설계됨.

서로 링크(심플한 단방향 링크)시킬 수 있고, 대규모화 가능.

### 분산 시스템으로서의 웹

개방형, 불특정 다수를 상대롤 하는 시스템. ↔ 폐쇄된 환경, 미리 상정한 숫자와 종류의 클라이언트 대상이 RPC

## 5 웹의 표준화

웹 이전의 인터넷 표준은 모두 IETF(Internet Engineering Task Force)의 RFC로 정해왔다. 실제로 HTTP, URI, 버전2까지의 HTML은 RFC로 정의되어 있다.

급속도로 웹이 보급되면서, IETF에서의 스펙 책정이 따라가질 못해쏙, 각 기업의 구현이 제각각이라 상호운영성이 결여되는 상태가 발생했다. 이런 문제를 해결하고자, 표준화 목적으로 w3c가 설립되었다.

### REST 탄생

웹 아키텍처를 결정한 중요 인물, 로이 필딩

HTTP는 Hypertext를 넘어, 다양한 것을 전송하는데, 이를 리소스 상태(Resource State)의 표현(Representation)이라고 주장.

그래서 Representational State Transfer라고 붙임.

### 다양한 하이퍼미디어 포맷의 탄생

초기 웹에서는 HTML이 유일한 하이퍼미디어 포맷이었음. 하지만, 웹이 보급됨에 따라 HTML만으로는 대응할 수 없었고 다른 포맷도 탄생.
ex> microformats, RSS, Atom, JSON

데이터 포맷에서 사실상 표준이 된 것은 json.

## 6 웹 API를 둘러싼 논의

많은 그룹에서 웹을 포르그램에서 이용할 수 있도록 하기 위해 확장을 시도했다.

### SOAP vs WS-

- SOAP
Simple Object Access Protocol ; 목적이 오브젝트에 액세스 하는 것만이 아니라, 단순히 SOAP으로 개정되었다.
RPC/분산 오브젝트 그룹이 강력한 그룹 중 하나였는데, 기본 프로토콜로 SOAP 사용.
    - 애플리케이션 프로토콜이 아닌 트랜스포트 프로토콜로 다룸 ?
    - HTTP 상에서 독자적으로 메시지를 전송.
    - MS가 w3c에 제안했고, IBM과 그 밖의 밴더를 끌어들여 표준화 진행
    - 메시지 전송 방법만 규정해서, 실제 시스템 구축시는 SOAP 상에 서비스 별로 프로토콜 정의 필요

### SOAP vs REST

필딩은 개인이지만, 웹이 웹다울 수 있기 위해 REST 강력 주장.

### REST 오해와 보급

2003년 대립 정점.

아마존, 구글같은 기업들은 REST형태로 웹 API 제공. 웹2.0에서 중요했던 것은 매쉬업.

웹 API가 제공하는 리소스를 HTTP와 URI로 간단히 조작할 수 있는 REST 스타일이 받아들여짐.

### SOAP와 WS-의 패인

1. 기술적 이유 : RPC/분산 오브젝트 문제점 그대로 갖고, 호환성 결여, 복잡한 프로토콜 스택, 네트워크 통한 인터페이스 호출에 의한 오버헤드 
2. 정치적 이유 : w3c와 OASIS에서 수행했는데, 많은 밴더들이 SOAP 자체도 표준으로 확정되기 전에 구현을 추진. 동일한 SOAP와 ws- 라도 해석 차이 생기고 호환성 결여

## 7 모든 것은 웹으로

REST 보급되면서 웹은 인터넷을 통째로 집어 삼키기 시작.

Ajax, comet(?) 등 기술에 의해, 사용자 인터페이스와 편의성이 웹의 장점과 맞물려 계속 실현됨.